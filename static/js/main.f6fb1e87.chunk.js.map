{"version":3,"sources":["../node_modules/peerjs/dist sync","RtcDemo.jsx","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","peer","Peer","RtcDemo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","answerCall","callUser","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","video","audio","stream","myVideo","current","srcObject","state","userId","on","remoteStream","remoteVideo","err","console","error","React","createRef","myId","_this2","log","answer","_this3","react_default","a","createElement","Fragment","autoPlay","ref","type","placeholder","value","onChange","setState","target","onClick","bind","_id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_RtcDemo","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"+FAAA,SAAAA,EAAAC,GACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAF,EAAA,KAEA,MADAC,EAAAE,KAAA,mBACAF,EAEAF,EAAAK,KAAA,WAAuC,UACvCL,EAAAM,QAAAN,EACAO,EAAAC,QAAAR,EACAA,EAAAS,GAAA,iICLMC,EAAO,WAAIC,GA+DFC,cA5DX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA0BVQ,WAAa,aA3BMP,EA8BnBQ,SAAW,WACPC,UAAUC,aAAeD,UAAUC,cAAgBD,UAAUE,oBAAsBF,UAAUG,gBAC7FH,UAAUC,aAAa,CAAEG,OAAO,EAAMC,OAAO,GAAQ,SAACC,GAClDf,EAAKgB,QAAQC,QAAQC,UAAYH,EACpBnB,EAAKU,KAAKN,EAAKmB,MAAMC,OAAQL,GACrCM,GAAG,SAAU,SAACC,GAEftB,EAAKuB,YAAYN,QAAQC,UAAYI,KAE1C,SAACE,GACAC,QAAQC,MAAM,6BAA8BF,MAtChDxB,EAAKgB,QAAUW,IAAMC,YACrB5B,EAAKuB,YAAcI,IAAMC,YACzB5B,EAAKmB,MAAQ,CACTC,OAAQ,GACRS,KAAM,IANK7B,mFAUC,IAAA8B,EAAA3B,KAChBM,UAAUC,aAAeD,UAAUC,cAAgBD,UAAUE,oBAAsBF,UAAUG,gBAC7FhB,EAAKyB,GAAG,OAAQ,SAACf,GACbmB,QAAQM,IAAI,eAAgBzB,GAC5BG,UAAUC,aAAa,CAAEG,OAAO,EAAMC,OAAO,GAAQ,SAACC,GAClDe,EAAKd,QAAQC,QAAQC,UAAYH,EACjCT,EAAK0B,OAAOjB,GACZT,EAAKe,GAAG,SAAU,SAACC,GAEfQ,EAAKP,YAAYN,QAAQC,UAAYI,KAE1C,SAACE,GACAC,QAAQC,MAAM,6BAA8BF,wCAuB/C,IAAAS,EAAA9B,KACL,OACI+B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,mBAAWjC,KAAKgB,MAAMU,MACtBK,EAAAC,EAAAC,cAAA,SAAOE,UAAQ,EAACC,IAAKpC,KAAKa,UAC1BkB,EAAAC,EAAAC,cAAA,SAAOE,UAAQ,EAACC,IAAKpC,KAAKoB,cAC1BW,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,YAAY,UAAUC,MAAOvC,KAAKgB,MAAMC,OAAQuB,SAAU,SAACvD,GAAQ6C,EAAKW,SAAS,CAAExB,OAAQhC,EAAEyD,OAAOH,WACvHR,EAAAC,EAAAC,cAAA,UAAQU,QAAS3C,KAAKK,SAASuC,KAAK5C,OAApC,QACA+B,EAAAC,EAAAC,cAAA,UAAQU,QAAS3C,KAAKI,WAAWwC,KAAK5C,OAAtC,UACA+B,EAAAC,EAAAC,cAAA,UAAQU,QAAS,WAAOb,EAAKW,SAAS,CAACf,KAAMjC,EAAKoD,QAAlD,0BAvDMC,aCOFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBlD,WACrBA,UAAUmD,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f6fb1e87.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 16;","import React, { Component } from \"react\";\r\nimport Peer from \"peerjs\";\r\n\r\nconst peer = new Peer();\r\n\r\nclass RtcDemo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.myVideo = React.createRef();\r\n        this.remoteVideo = React.createRef();\r\n        this.state = {\r\n            userId: \"\",\r\n            myId: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n        peer.on('call', (call) => {\r\n            console.log(\"user calling\", call);\r\n            navigator.getUserMedia({ video: true, audio: true }, (stream) => {\r\n                this.myVideo.current.srcObject = stream;\r\n                call.answer(stream); // Answer the call with an A/V stream.\r\n                call.on('stream', (remoteStream) => {\r\n                    // Show stream in some <video> element.\r\n                    this.remoteVideo.current.srcObject = remoteStream;\r\n                });\r\n            }, (err) => {\r\n                console.error('Failed to get local stream', err);\r\n            });\r\n        });\r\n    }\r\n\r\n    answerCall = () => {\r\n    }\r\n\r\n    callUser = () => {\r\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n        navigator.getUserMedia({ video: true, audio: true }, (stream) => {\r\n            this.myVideo.current.srcObject = stream;\r\n            const call = peer.call(this.state.userId, stream);\r\n            call.on('stream', (remoteStream) => {\r\n                // Show stream in some <video> element.\r\n                this.remoteVideo.current.srcObject = remoteStream;\r\n            });\r\n        }, (err) => {\r\n            console.error('Failed to get local stream', err);\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <p>my id: {this.state.myId}</p>\r\n                <video autoPlay ref={this.myVideo}></video>\r\n                <video autoPlay ref={this.remoteVideo}></video>\r\n                <input type=\"text\" placeholder=\"user id\" value={this.state.userId} onChange={(e) => { this.setState({ userId: e.target.value }) }} />\r\n                <button onClick={this.callUser.bind(this)}>Call</button>\r\n                <button onClick={this.answerCall.bind(this)}>Answer</button>\r\n                <button onClick={() => {this.setState({myId: peer._id})}}>Log my details</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RtcDemo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RtcDemo from './RtcDemo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RtcDemo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}